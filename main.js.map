{"version":3,"file":"main.js","mappings":";;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC9GoD;AACpD;AACe;AACf,eAAe,aAAa;AAC5B;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,qBAAqB,aAAa;AAClC,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA,oBAAoB,aAAa;AACjC,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AC3De;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BiC;AACjC;AACe,6BAA6B,MAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iCAAiC;AACrD,sBAAsB,oCAAoC;AAC1D,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,2BAA2B,MAAM;AACjC;AACA;AACA,qBAAqB,MAAM;AAC3B;AACA,QAAQ,aAAa;AACrB,QAAQ,aAAa;AACrB,QAAQ,aAAa;AACrB,QAAQ,aAAa;AACrB;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7Ee;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpB6B;AAC7B;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+BAA+B;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA,0BAA0B,kBAAkB;AAC5C;AACA;AACA,MAAM;AACN,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACtIe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrCoD;AACpD;AACe;AACf,uBAAuB,aAAa;AACpC;AACA,qDAAqD,qBAAqB;AAC1E,kDAAkD,sBAAsB;AACxE;AACA,kBAAkB,2BAA2B;AAC7C,oBAAoB,0BAA0B;AAC9C;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC/B+C;AACK;AACpD;AACe;AACf;AACA;AACA,iCAAiC,aAAa;AAC9C,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA,oCAAoC,aAAa;AACjD,2BAA2B,aAAa;AACxC;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrCsC;AACW;AACJ;AACE;AACW;AAC1D;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,aAAa;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC;AACA,eAAe,aAAa;AAC5B;AACA;AACA,0BAA0B,aAAa;AACvC;AACA;AACA,4BAA4B,aAAa;AACzC,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,IAAI;AACvB;AACA;AACA;AACA;;;ACrJO;;;ACA+D;AAC3B;AAC3C;AACe;AACf,oBAAoB,aAAa;AACjC;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,iBAAiB,aAAa;AAC9B;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA,kBAAkB,IAAI,SAAS,SAAS;AACxC,qBAAqB,SAAS;AAC9B,qBAAqB,aAAa;AAClC,mBAAmB,aAAa;AAChC,uCAAuC,SAAS;AAChD;AACA,yBAAyB,gBAAgB;AACzC;AACA;AACA;AACA,0BAA0B,aAAa;AACvC,iBAAiB,aAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzC6C;AACiB;AACf;AAC/C;AACe;AACf;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,oDAAoD,UAAU;AAC9D;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;;;AC1MqD;AACX;AACgB;AACV;AACL;AACY;AACZ;AAC3C;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,MAAM,yBAAyB,SAAS;AAC1D;AACA;AACA,gCAAgC,SAAS;AACzC,QAAQ,SAAS;AACjB;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA,MAAM;AACN,oBAAoB,MAAM,yBAAyB,SAAS;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,cAAc;AAClB;AACA;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C,QAAQ,QAAQ;AAChB;AACA;AACA;AACA,MAAM,cAAc;AACpB;AACA;AACA;AACA;AACA,QAAQ,QAAQ;AAChB,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC3FqB;AACA;AACD;AACK;AACC;AAC1B;AAC6C;AAC7C;AACA,SAAS","sources":["webpack://webpack-template/./src/htmlGenerators.js","webpack://webpack-template/./src/setupFormRenderer.js","webpack://webpack-template/./src/entities/Player.js","webpack://webpack-template/./src/entities/ComputerPlayer.js","webpack://webpack-template/./src/entities/Ship.js","webpack://webpack-template/./src/entities/Gameboard.js","webpack://webpack-template/./src/entities/Game.js","webpack://webpack-template/./src/boardRenderer.js","webpack://webpack-template/./src/turnRenderer.js","webpack://webpack-template/./src/gameController.js","webpack://webpack-template/./src/shipSizes.js","webpack://webpack-template/./src/setupBoardFormRenderer.js","webpack://webpack-template/./src/setupBoardController.js","webpack://webpack-template/./src/setupController.js","webpack://webpack-template/./src/index.js"],"sourcesContent":["export function createElement(type, ...classNames) {\r\n  const element = document.createElement(type);\r\n  element.classList.add(...classNames);\r\n  return element;\r\n}\r\n\r\nexport function createShipPlacer(shipSize, boardSize) {\r\n  const container = document.createDocumentFragment();\r\n\r\n  const draggablePlacer = createElement(\"div\", \"draggable-place-ship\");\r\n  const iconContainer = createElement(\r\n    \"div\",\r\n    \"icon-container\",\r\n    \"draggable-place-ship-icon\",\r\n  );\r\n  const icon = createElement(\"div\", \"icon\", \"pointer\");\r\n  iconContainer.appendChild(icon);\r\n  iconContainer.draggable = true;\r\n  draggablePlacer.appendChild(iconContainer);\r\n\r\n  const draggableText = createElement(\"div\");\r\n  draggableText.textContent = \"Drag to board\";\r\n  draggablePlacer.appendChild(draggableText);\r\n  container.appendChild(draggablePlacer);\r\n\r\n  const xCoordRow = createElement(\"div\", \"coord-row\", \"form-row\");\r\n  xCoordRow.appendChild(\r\n    createLabelWithInput(\"X\", \"number\", \"x-coord\", \"x-coord\", {\r\n      min: 1,\r\n      max: boardSize,\r\n      step: 1,\r\n      required: true,\r\n    }),\r\n  );\r\n  container.appendChild(xCoordRow);\r\n\r\n  const yCoordRow = createElement(\"div\", \"coord-row\", \"form-row\");\r\n  yCoordRow.appendChild(\r\n    createLabelWithInput(\"Y\", \"number\", \"y-coord\", \"y-coord\", {\r\n      min: 1,\r\n      max: boardSize,\r\n      step: 1,\r\n      required: true,\r\n    }),\r\n  );\r\n  container.appendChild(yCoordRow);\r\n\r\n  const orientationRow = createElement(\"div\", \"orientation-row\", \"form-row\");\r\n\r\n  const orientationLabel = createElement(\"label\");\r\n  orientationLabel.for = \"orientation\";\r\n  orientationLabel.textContent = \"Pos.\";\r\n  orientationRow.appendChild(orientationLabel);\r\n\r\n  const orientationSelect = createElement(\"select\", \"orientation-select\");\r\n  orientationSelect.id = \"orientation\";\r\n  orientationSelect.name = \"orientation\";\r\n\r\n  const horizontalOption = createOption(\"horizontal\", \"Horizontal\");\r\n  const verticalOption = createOption(\"vertical\", \"Vertical\");\r\n  orientationSelect.appendChild(horizontalOption);\r\n  orientationSelect.appendChild(verticalOption);\r\n\r\n  orientationRow.appendChild(orientationSelect);\r\n  container.appendChild(orientationRow);\r\n\r\n  const shipSizeInput = createElement(\"input\");\r\n  shipSizeInput.type = \"hidden\";\r\n  shipSizeInput.value = shipSize;\r\n  shipSizeInput.name = \"ship-size\";\r\n  container.appendChild(shipSizeInput);\r\n\r\n  container.appendChild(createElement(\"div\", \"error-message\"));\r\n\r\n  return container;\r\n}\r\n\r\nexport function createOption(value, text) {\r\n  const option = createElement(\"option\");\r\n  option.value = value;\r\n  option.textContent = text;\r\n  return option;\r\n}\r\n\r\nexport function createLabelWithInput(\r\n  labelText,\r\n  inputType,\r\n  inputId,\r\n  inputName,\r\n  restrictions = {},\r\n) {\r\n  const container = document.createDocumentFragment();\r\n\r\n  const label = createElement(\"label\");\r\n  label.for = inputId;\r\n  label.textContent = labelText;\r\n\r\n  const input = createElement(\"input\");\r\n  input.type = inputType;\r\n  input.id = inputId;\r\n  input.name = inputName;\r\n\r\n  for (const [key, value] of Object.entries(restrictions)) {\r\n    input.setAttribute(key, value);\r\n  }\r\n\r\n  container.appendChild(label);\r\n  container.appendChild(input);\r\n\r\n  return container;\r\n}\r\n","import { createElement } from \"./htmlGenerators.js\";\r\n\r\nexport default function generateSetupForm() {\r\n  const form = createElement(\"form\", \"setup-form\");\r\n  form.id = \"setup-game-form\";\r\n\r\n  const h1 = createElement(\"h1\");\r\n  h1.innerText = \"New Game Setup\";\r\n  form.appendChild(h1);\r\n\r\n  const player1Row = createElement(\"div\", \"form-row\");\r\n  const player1Label = createElement(\"label\");\r\n  player1Label.for = \"player1-name\";\r\n  player1Label.innerText = \"Player 1 Name\";\r\n  player1Row.appendChild(player1Label);\r\n\r\n  const player1Input = createElement(\"input\");\r\n  player1Input.type = \"text\";\r\n  player1Input.id = \"player1-name\";\r\n  player1Input.required = true;\r\n  player1Input.autofocus = true;\r\n  player1Input.name = \"player1-name\";\r\n  player1Row.appendChild(player1Input);\r\n  form.appendChild(player1Row);\r\n\r\n  const player2Row = createElement(\"div\", \"form-row\");\r\n  const player2Label = createElement(\"label\");\r\n  player2Label.for = \"player2-name\";\r\n  player2Label.innerText = \"Player 2 Name\";\r\n  player2Row.appendChild(player2Label);\r\n\r\n  const player2Input = createElement(\"input\");\r\n  player2Input.type = \"text\";\r\n  player2Input.id = \"player2-name\";\r\n  player2Input.name = \"player2-name\";\r\n  player2Row.appendChild(player2Input);\r\n  form.appendChild(player2Row);\r\n\r\n  const isComputerRow = createElement(\"div\", \"form-row\");\r\n  const isComputerInput = createElement(\"input\");\r\n  isComputerInput.type = \"checkbox\";\r\n  isComputerInput.name = \"is-computer\";\r\n  isComputerInput.id = \"is-computer\";\r\n  isComputerRow.appendChild(isComputerInput);\r\n\r\n  const isComputerLabel = createElement(\"label\");\r\n  isComputerLabel.for = \"is-computer\";\r\n  isComputerLabel.innerText = \"Play against computer\";\r\n  isComputerRow.appendChild(isComputerLabel);\r\n  form.appendChild(isComputerRow);\r\n\r\n  const buttonRow = createElement(\"div\", \"form-row\");\r\n  const button = createElement(\"button\", \"submit-players\");\r\n  button.type = \"button\";\r\n  button.innerText = \"Start Game\";\r\n  buttonRow.appendChild(button);\r\n  form.appendChild(buttonRow);\r\n\r\n  return form;\r\n}\r\n","export default class Player {\r\n  #name;\r\n  #gameboard;\r\n\r\n  constructor(name, gameboard) {\r\n    this.#name = name;\r\n    this.#gameboard = gameboard;\r\n  }\r\n\r\n  getName() {\r\n    return this.#name;\r\n  }\r\n\r\n  getGameboard() {\r\n    return this.#gameboard;\r\n  }\r\n\r\n  receiveAttack(x, y) {\r\n    return this.#gameboard.receiveAttack(x, y);\r\n  }\r\n\r\n  placeShip(origX, origY, size, isHorizontal) {\r\n    return this.#gameboard.placeShip(origX, origY, size, isHorizontal);\r\n  }\r\n\r\n  allShipsSunk() {\r\n    return this.#gameboard.allShipsSunk();\r\n  }\r\n}\r\n","import Player from \"./Player.js\";\r\n\r\nexport default class ComputerPlayer extends Player {\r\n  #attacksGameboard;\r\n  #hitsStack;\r\n  constructor(name, gameboard) {\r\n    super(name, gameboard);\r\n    this.#attacksGameboard = ComputerPlayer.#initializeAttacksList(gameboard);\r\n    this.#hitsStack = [];\r\n  }\r\n\r\n  static #initializeAttacksList(gameboard) {\r\n    const attacksGameboard = new Set();\r\n    for (let i = 0; i < gameboard.getBoard().length; i++) {\r\n      for (let j = 0; j < gameboard.getBoard()[i].length; j++) {\r\n        attacksGameboard.add(JSON.stringify({ x: i, y: j }));\r\n      }\r\n    }\r\n    return attacksGameboard;\r\n  }\r\n\r\n  #attacksGameboardHas(coords) {\r\n    return this.#attacksGameboard.has(JSON.stringify(coords));\r\n  }\r\n\r\n  #attacksGameboardDelete(coords) {\r\n    this.#attacksGameboard.delete(JSON.stringify(coords));\r\n  }\r\n\r\n  getAttack() {\r\n    while (this.#hitsStack.length > 0) {\r\n      const lastHit = this.#hitsStack[this.#hitsStack.length - 1];\r\n      const newPosition = this.getValidNeighbor(lastHit);\r\n      if (newPosition) {\r\n        this.#attacksGameboardDelete(newPosition);\r\n        return newPosition;\r\n      }\r\n      this.#hitsStack.pop();\r\n    }\r\n\r\n    return this.getRandomAttack();\r\n  }\r\n\r\n  getRandomAttack() {\r\n    if (this.#attacksGameboard.size === 0) {\r\n      throw new Error(\"No spaces left to attack\");\r\n    }\r\n\r\n    const randomAttack = [...this.#attacksGameboard][\r\n      Math.floor(Math.random() * this.#attacksGameboard.size)\r\n    ];\r\n    this.#attacksGameboard.delete(randomAttack);\r\n\r\n    return JSON.parse(randomAttack);\r\n  }\r\n\r\n  registerHit({ x, y }) {\r\n    this.#hitsStack.push({ x, y });\r\n  }\r\n\r\n  getValidNeighbor({ x, y }) {\r\n    const positions = [\r\n      { x, y: y - 1 }, // up\r\n      { x: x + 1, y }, // right\r\n      { x, y: y + 1 }, // down\r\n      { x: x - 1, y }, // left\r\n    ];\r\n\r\n    for (let i = 0; i < positions.length; i++) {\r\n      const position = positions[i];\r\n      if (this.#attacksGameboardHas(position)) {\r\n        return position;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","export default class Ship {\r\n  #size;\r\n  #hits;\r\n  constructor(size) {\r\n    if (size <= 0) {\r\n      throw new Error(\"Invalid ship size\");\r\n    }\r\n    this.#size = size;\r\n    this.#hits = 0;\r\n  }\r\n\r\n  hit() {\r\n    if (this.#hits < this.#size) {\r\n      this.#hits += 1;\r\n    }\r\n  }\r\n\r\n  isSunk() {\r\n    return this.#hits === this.#size;\r\n  }\r\n}\r\n","import Ship from \"./Ship.js\";\r\n\r\nexport default class Gameboard {\r\n  #width;\r\n  #height;\r\n  #board;\r\n  #ships = new Set();\r\n\r\n  constructor(width, height) {\r\n    this.#width = width;\r\n    this.#height = height ?? width;\r\n    this.#board = [...Array(this.#height)].map(() =>\r\n      [...Array(this.#width)].map(() => ({ ship: null, hasBeenHit: false })),\r\n    );\r\n  }\r\n\r\n  getHeight() {\r\n    return this.#height;\r\n  }\r\n\r\n  getWidth() {\r\n    return this.#width;\r\n  }\r\n\r\n  getBoard() {\r\n    return JSON.parse(JSON.stringify(this.#board));\r\n  }\r\n\r\n  placeShip(origX, origY, size, isHorizontal) {\r\n    const result = this.#validatePosition(origX, origY, size, isHorizontal);\r\n    if (result instanceof Error) {\r\n      return result;\r\n    }\r\n\r\n    const ship = new Ship(size);\r\n    this.#ships.add(ship);\r\n\r\n    if (isHorizontal) {\r\n      for (let x = origX; x < origX + size; x++) {\r\n        this.#board[origY][x].ship = ship;\r\n      }\r\n    } else {\r\n      for (let y = origY; y < origY + size; y++) {\r\n        this.#board[y][origX].ship = ship;\r\n      }\r\n    }\r\n\r\n    return \"Success\";\r\n  }\r\n\r\n  #validatePosition(origX, origY, size, isHorizontal) {\r\n    if (\r\n      (isHorizontal && origX + size > this.#width) ||\r\n      (!isHorizontal && origY + size > this.#height) ||\r\n      origX < 0 ||\r\n      origY < 0\r\n    ) {\r\n      return new Error(\"Ship placed out of bounds\");\r\n    }\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      const col = isHorizontal ? origX + i : origX;\r\n      const row = isHorizontal ? origY : origY + i;\r\n\r\n      if (this.#board[row][col].ship !== null) {\r\n        return new Error(\"Ships cannot overlap\");\r\n      }\r\n    }\r\n  }\r\n\r\n  getCell(x, y) {\r\n    const cell = this.#board[y][x];\r\n\r\n    return {\r\n      ship: cell.ship !== null ? this.#getSanitizedShip(cell.ship) : null,\r\n      hasBeenHit: cell.hasBeenHit,\r\n    };\r\n  }\r\n\r\n  #getSanitizedShip(ship) {\r\n    return {\r\n      isSunk: ship.isSunk(),\r\n    };\r\n  }\r\n\r\n  receiveAttack(x, y) {\r\n    const cell = this.#board[y][x];\r\n\r\n    if (cell.hasBeenHit) {\r\n      return false;\r\n    }\r\n\r\n    cell.hasBeenHit = true;\r\n\r\n    if (cell.ship !== null) {\r\n      cell.ship.hit();\r\n      return \"hit\";\r\n    } else {\r\n      return \"miss\";\r\n    }\r\n  }\r\n\r\n  allShipsSunk() {\r\n    return [...this.#ships].every((ship) => ship.isSunk());\r\n  }\r\n\r\n  static generateRandomBoard(shipSizes, boardWidth, boardHeight) {\r\n    const board = new Gameboard(boardWidth, boardHeight);\r\n    const maxAttempts = 100;\r\n\r\n    for (const shipSize of shipSizes) {\r\n      let attempts = 0;\r\n      let placed = false;\r\n\r\n      while (!placed && attempts < maxAttempts) {\r\n        attempts++;\r\n\r\n        const x = Math.floor(Math.random() * boardWidth);\r\n        const y = Math.floor(Math.random() * boardHeight);\r\n        const isHorizontal = Math.random() < 0.5;\r\n\r\n        if (board.placeShip(x, y, shipSize, isHorizontal) === \"Success\") {\r\n          placed = true;\r\n        }\r\n      }\r\n\r\n      // if the ship cannot be placed, generate a new board\r\n      if (!placed) {\r\n        return generateRandomBoard(shipSizes, boardWidth, boardHeight);\r\n      }\r\n    }\r\n\r\n    return board;\r\n  }\r\n}\r\n","export default class Game {\r\n  constructor(player1, player2) {\r\n    this.player1 = player1;\r\n    this.player2 = player2;\r\n    this.currentPlayer = player1;\r\n  }\r\n\r\n  getCurrentPlayer() {\r\n    return this.currentPlayer;\r\n  }\r\n\r\n  getOpponentPlayer() {\r\n    return this.currentPlayer === this.player1 ? this.player2 : this.player1;\r\n  }\r\n\r\n  attack(x, y) {\r\n    return this.getOpponentPlayer().receiveAttack(x, y);\r\n  }\r\n\r\n  switchPlayer() {\r\n    if (this.currentPlayer === this.player1) {\r\n      this.currentPlayer = this.player2;\r\n    } else {\r\n      this.currentPlayer = this.player1;\r\n    }\r\n  }\r\n\r\n  get isOver() {\r\n    return this.player1.allShipsSunk() || this.player2.allShipsSunk();\r\n  }\r\n\r\n  get winner() {\r\n    if (!this.player1.allShipsSunk() && !this.player2.allShipsSunk()) {\r\n      return null;\r\n    }\r\n    return this.player1.allShipsSunk() ? this.player2 : this.player1;\r\n  }\r\n}\r\n","import { createElement } from \"./htmlGenerators.js\";\r\n\r\nexport default function generateBoard(gameboard, isOpponent = false) {\r\n  const boardElement = createElement(\"div\", \"gameboard\");\r\n\r\n  boardElement.style.gridTemplateColumns = `repeat(${gameboard.getWidth()}, 5vmin)`;\r\n  boardElement.style.gridTemplateRows = `repeat(${gameboard.getHeight()}, 5vmin)`;\r\n\r\n  for (let y = 0; y < gameboard.getHeight(); y++) {\r\n    for (let x = 0; x < gameboard.getWidth(); x++) {\r\n      const cellData = gameboard.getCell(x, y);\r\n      const cell = createElement(\"div\", \"cell\");\r\n      cell.dataset.x = x;\r\n      cell.dataset.y = y;\r\n      if (cellData.ship !== null) {\r\n        if (isOpponent === false || cellData.hasBeenHit === true) {\r\n          cell.classList.add(\"ship\");\r\n        }\r\n        if (cellData.ship.isSunk) {\r\n          cell.classList.add(\"sunk\");\r\n        }\r\n      }\r\n      if (cellData.hasBeenHit === true) {\r\n        cell.classList.add(\"hit\");\r\n      }\r\n\r\n      boardElement.appendChild(cell);\r\n    }\r\n  }\r\n\r\n  return boardElement;\r\n}\r\n","import generateBoard from \"./boardRenderer.js\";\r\nimport { createElement } from \"./htmlGenerators.js\";\r\n\r\nexport default function generateTurn(currentPlayer, opponent) {\r\n  const container = document.createDocumentFragment();\r\n\r\n  const currentPlayerContainer = createElement(\"div\", \"player-container\");\r\n  const currentPlayerTitle = createElement(\"h2\");\r\n  currentPlayerTitle.innerText = \"Your board\";\r\n  currentPlayerContainer.appendChild(currentPlayerTitle);\r\n\r\n  const currentGameboardContainer = createElement(\"div\", \"gameboard-container\");\r\n  const currentGameboard = generateBoard(currentPlayer.getGameboard());\r\n  currentGameboardContainer.appendChild(currentGameboard);\r\n  currentPlayerContainer.appendChild(currentGameboardContainer);\r\n\r\n  const opponentContainer = createElement(\r\n    \"div\",\r\n    \"player-container\",\r\n    \"opponent\",\r\n  );\r\n  const opponentTitle = createElement(\"h2\");\r\n  opponentTitle.innerText = \"Opponent board\";\r\n  opponentContainer.appendChild(opponentTitle);\r\n\r\n  const opponentGameboardContainer = createElement(\r\n    \"div\",\r\n    \"gameboard-container\",\r\n  );\r\n  const opponentGameboard = generateBoard(opponent.getGameboard(), true);\r\n  opponentGameboardContainer.appendChild(opponentGameboard);\r\n  opponentContainer.appendChild(opponentGameboardContainer);\r\n\r\n  container.appendChild(currentPlayerContainer);\r\n  container.appendChild(opponentContainer);\r\n\r\n  return container;\r\n}\r\n","import Game from \"./entities/Game.js\";\r\nimport { createElement } from \"./htmlGenerators\";\r\nimport generateTurn from \"./turnRenderer.js\";\r\nimport generateBoard from \"./boardRenderer.js\";\r\nimport ComputerPlayer from \"./entities/ComputerPlayer.js\";\r\n\r\nexport default function initGame(player1, player2) {\r\n  function initTurn() {\r\n    renderBoards(game.getCurrentPlayer(), game.getOpponentPlayer());\r\n\r\n    const button = document.querySelector(\".continue\");\r\n    button.dataset.switchPlayer = \"false\";\r\n    button.disabled = true;\r\n    button.textContent = \"End turn\";\r\n    button.scrollIntoView();\r\n\r\n    const opponentBoardContainer = document.querySelector(\r\n      \".opponent .gameboard\",\r\n    );\r\n    opponentBoardContainer.addEventListener(\"click\", handleGameboardClick);\r\n\r\n    const h1 = document.querySelector(\".game h1\");\r\n    h1.textContent = game.getCurrentPlayer().getName() + \" turn\";\r\n  }\r\n\r\n  const handleGameboardClick = (event) => {\r\n    const cellElement = event.target;\r\n    if (!cellElement.classList.contains(\"cell\")) {\r\n      return;\r\n    }\r\n\r\n    const x = cellElement.dataset.x;\r\n    const y = cellElement.dataset.y;\r\n    const opponent = game.getOpponentPlayer();\r\n    const opponentGameboard = opponent.getGameboard();\r\n    const cell = opponentGameboard.getCell(x, y);\r\n    if (cell.hasBeenHit === false) {\r\n      const attackResult = game.attack(x, y);\r\n      if (attackResult !== false) {\r\n        finishTurn();\r\n      }\r\n    }\r\n  };\r\n\r\n  function makeComputerAttack() {\r\n    game.switchPlayer();\r\n    const position = game.getCurrentPlayer().getAttack();\r\n    const result = game.attack(position.x, position.y);\r\n    if (result === \"hit\") {\r\n      game.getCurrentPlayer().registerHit(position);\r\n    }\r\n    game.switchPlayer();\r\n  }\r\n\r\n  function finishTurn() {\r\n    const opponentBoardContainer = document.querySelector(\r\n      \".opponent .gameboard-container\",\r\n    );\r\n    opponentBoardContainer.innerHTML = \"\";\r\n    opponentBoardContainer.appendChild(\r\n      generateBoard(game.getOpponentPlayer().getGameboard(), true),\r\n    );\r\n\r\n    opponentBoardContainer.removeEventListener(\"click\", handleGameboardClick);\r\n\r\n    if (game.isOver) {\r\n      handleGameEnd();\r\n      return;\r\n    }\r\n\r\n    if (game.getOpponentPlayer() instanceof ComputerPlayer) {\r\n      makeComputerAttack();\r\n      if (game.isOver) {\r\n        setTimeout(() => {\r\n          handleGameEnd();\r\n          renderBoards(game.getCurrentPlayer(), game.getOpponentPlayer());\r\n        }, 500);\r\n        return;\r\n      }\r\n      setTimeout(initTurn, 500);\r\n    }\r\n\r\n    const button = document.querySelector(\".continue\");\r\n    button.disabled = false;\r\n  }\r\n\r\n  function handleGameEnd() {\r\n    const h1 = document.querySelector(\".game h1\");\r\n    h1.textContent = \"Game over! \" + game.winner.getName() + \" wins!\";\r\n  }\r\n\r\n  function renderBoards(playerLeft, playerRight) {\r\n    const gameContainer = document.querySelector(\".game-container\");\r\n    gameContainer.innerHTML = \"\";\r\n    gameContainer.appendChild(generateTurn(playerLeft, playerRight));\r\n  }\r\n\r\n  function renderGameTemplate() {\r\n    const main = document.querySelector(\"main\");\r\n    main.innerHTML = \"\";\r\n    main.appendChild(generateGameTemplate());\r\n\r\n    const button = document.querySelector(\".continue\");\r\n    button.addEventListener(\"click\", handleTurnEnd);\r\n    if (game.getOpponentPlayer() instanceof ComputerPlayer) {\r\n      button.style.display = \"none\";\r\n    }\r\n  }\r\n\r\n  function handleTurnEnd(event) {\r\n    const button = event.target;\r\n    const switchPlayer = button.dataset.switchPlayer === \"true\";\r\n\r\n    if (switchPlayer) {\r\n      game.switchPlayer();\r\n      initTurn();\r\n      return;\r\n    }\r\n\r\n    button.dataset.switchPlayer = \"true\";\r\n    button.textContent = \"Start turn\";\r\n    const gameContainer = document.querySelector(\".game-container\");\r\n    gameContainer.innerHTML = \"\";\r\n    const h1 = document.querySelector(\".game h1\");\r\n    h1.textContent = \"Pass the screen to \" + game.getOpponentPlayer().getName();\r\n  }\r\n\r\n  function generateGameTemplate() {\r\n    const container = createElement(\"div\", \"game\");\r\n\r\n    const h1 = createElement(\"h1\");\r\n    container.appendChild(h1);\r\n\r\n    const gameContainer = createElement(\"div\", \"game-container\");\r\n    container.appendChild(gameContainer);\r\n\r\n    const buttonContainer = createElement(\"div\", \"botton-container\");\r\n    const button = createElement(\"button\", \"continue\");\r\n    button.innerText = \"End turn\";\r\n    buttonContainer.appendChild(button);\r\n    container.appendChild(buttonContainer);\r\n\r\n    return container;\r\n  }\r\n\r\n  const game = new Game(player1, player2);\r\n  renderGameTemplate();\r\n\r\n  initTurn(game);\r\n}\r\n","export const shipSizes = [1, 1, 1, 1, 2, 2, 2, 3, 3, 4];\r\n","import { createElement, createShipPlacer } from \"./htmlGenerators.js\";\r\nimport { shipSizes } from \"./shipSizes.js\";\r\n\r\nexport default function generateSetupBoardForm(playerName, boardSize) {\r\n  const container = createElement(\"div\", \"setup-board\");\r\n\r\n  const h1 = createElement(\"h1\");\r\n  h1.textContent = playerName + \" place your ships!\";\r\n  container.appendChild(h1);\r\n\r\n  const panels = createElement(\"div\", \"panels\");\r\n  container.appendChild(panels);\r\n\r\n  const boardContainer = createElement(\"div\", \"board-container\");\r\n  panels.appendChild(boardContainer);\r\n\r\n  const formContainer = createElement(\"div\", \"setup-board-form-container\");\r\n  panels.appendChild(formContainer);\r\n\r\n  const form = createElement(\"form\", \"setup-board-form\");\r\n  form.id = \"setup-board-form\";\r\n  formContainer.appendChild(form);\r\n\r\n  for (let i = 0; i < shipSizes.length; i++) {\r\n    const shipSize = shipSizes[i];\r\n    const fieldset = createElement(\"fieldset\");\r\n    const legend = createElement(\"legend\");\r\n    legend.textContent = `Ship size: ${shipSize}`;\r\n    fieldset.appendChild(legend);\r\n    fieldset.appendChild(createShipPlacer(shipSize, boardSize));\r\n    form.appendChild(fieldset);\r\n  }\r\n\r\n  const buttonContainer = createElement(\"div\", \"button-container\");\r\n  const button = createElement(\"button\", \"submit-board\");\r\n  button.textContent = \"Confirm board\";\r\n  button.disabled = true;\r\n  buttonContainer.appendChild(button);\r\n  formContainer.appendChild(buttonContainer);\r\n\r\n  return container;\r\n}\r\n","import Gameboard from \"./entities/Gameboard\";\r\nimport generateSetupBoardForm from \"./setupBoardFormRenderer\";\r\nimport generateBoard from \"./boardRenderer.js\";\r\n\r\nexport default function initSetupBoard(playerName, boardSize) {\r\n  function renderSetupBoardForm(playerName, boardSize) {\r\n    const main = document.querySelector(\"main\");\r\n    main.innerHTML = \"\";\r\n    main.appendChild(generateSetupBoardForm(playerName, boardSize));\r\n  }\r\n\r\n  function addInputListeners() {\r\n    const inputs = document.querySelectorAll(\"input\");\r\n    inputs.forEach((input) => {\r\n      input.addEventListener(\"input\", (event) => validateInput(event.target));\r\n      input.addEventListener(\"input\", handleValueChange);\r\n    });\r\n\r\n    const selects = document.querySelectorAll(\"select\");\r\n    selects.forEach((select) => {\r\n      select.addEventListener(\"change\", handleValueChange);\r\n    });\r\n  }\r\n\r\n  function addDraggableButtonsListeners() {\r\n    const buttons = document.querySelectorAll(\".draggable-place-ship-icon\");\r\n    buttons.forEach((button) => {\r\n      button.addEventListener(\"dragstart\", handleDragStart);\r\n      button.addEventListener(\"dragend\", handleDragEnd);\r\n    });\r\n  }\r\n\r\n  function addCellsDropListeners() {\r\n    const cells = document.querySelectorAll(\".cell\");\r\n    cells.forEach((cell) => {\r\n      cell.addEventListener(\"dragover\", preventEvent);\r\n      cell.addEventListener(\"dragenter\", handleDragEnter);\r\n      cell.addEventListener(\"dragleave\", handleDragLeave);\r\n      cell.addEventListener(\"drop\", handleDrop);\r\n    });\r\n  }\r\n\r\n  function handleDragEnter(event) {\r\n    event.target.classList.add(\"dragging-over\");\r\n    event.preventDefault();\r\n  }\r\n\r\n  function handleDragLeave(event) {\r\n    event.target.classList.remove(\"dragging-over\");\r\n    event.preventDefault();\r\n  }\r\n\r\n  function handleDragStart(event) {\r\n    event.target.classList.add(\"dragging\");\r\n    const gameboardElement = gameboardPreview.querySelector(\".gameboard\");\r\n    gameboardElement.classList.add(\"highlight-hover\");\r\n    draggedButton = event.target;\r\n  }\r\n\r\n  function handleDragEnd(event) {\r\n    event.target.classList.remove(\"dragging\");\r\n    const gameboardElement = gameboardPreview.querySelector(\".gameboard\");\r\n    gameboardElement.classList.remove(\"highlight-hover\");\r\n  }\r\n\r\n  function preventEvent(event) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  function handleDrop(event) {\r\n    event.preventDefault();\r\n    const cell = event.target;\r\n    if (cell.classList.contains(\"cell\") && draggedButton !== null) {\r\n      const fieldset = draggedButton.closest(\"fieldset\");\r\n      const xInput = fieldset.querySelector('[name=\"x-coord\"]');\r\n      const yInput = fieldset.querySelector('[name=\"y-coord\"]');\r\n\r\n      xInput.value = parseInt(cell.dataset.x) + 1;\r\n      yInput.value = parseInt(cell.dataset.y) + 1;\r\n      handleValueChange();\r\n    }\r\n\r\n    gameboardPreview.classList.remove(\"highlight-hover\");\r\n  }\r\n\r\n  function handleValueChange() {\r\n    const fielsets = document.querySelectorAll(\"fieldset\");\r\n    const gameboard = new Gameboard(boardSize);\r\n    let isValidBoard = true;\r\n\r\n    for (let i = 0; i < fielsets.length; i++) {\r\n      const fieldset = fielsets[i];\r\n      if (!fieldsetIsValid(fieldset)) {\r\n        isValidBoard = false;\r\n        continue;\r\n      }\r\n\r\n      const x = Number(fieldset.querySelector('[name=\"x-coord\"]').value - 1);\r\n      const y = Number(fieldset.querySelector('[name=\"y-coord\"]').value - 1);\r\n      const size = Number(fieldset.querySelector('[name=\"ship-size\"]').value);\r\n      const orientation = fieldset.querySelector('[name=\"orientation\"]').value;\r\n\r\n      const placementResult = gameboard.placeShip(\r\n        x,\r\n        y,\r\n        size,\r\n        orientation === \"horizontal\",\r\n      );\r\n\r\n      if (placementResult !== \"Success\") {\r\n        setFieldsetError(fieldset, placementResult);\r\n        isValidBoard = false;\r\n      } else {\r\n        setFieldsetError(fieldset, \"\");\r\n      }\r\n    }\r\n\r\n    renderBoard(gameboard, gameboardPreview);\r\n    const confirmBoardButton = document.querySelector(\".submit-board\");\r\n    confirmBoardButton.disabled = !isValidBoard;\r\n\r\n    return isValidBoard;\r\n  }\r\n\r\n  function clearInvalidStatus(input) {\r\n    input.classList.remove(\"invalid\");\r\n  }\r\n\r\n  function validateInput(input, showError = true) {\r\n    const fieldset = input.closest(\"fieldset\");\r\n    let errorMessage = \"\";\r\n    let isValid = true;\r\n\r\n    if (input.validity.valueMissing) {\r\n      errorMessage = \"This field is required.\";\r\n      isValid = false;\r\n    } else if (input.validity.rangeOverflow || input.validity.rangeUnderflow) {\r\n      errorMessage = `Value must be between 1 and ${boardSize}.`;\r\n      isValid = false;\r\n    } else if (input.validity.badInput) {\r\n      errorMessage = \"Value must be an integer number.\";\r\n      isValid = false;\r\n    }\r\n\r\n    if (!isValid) {\r\n      if (showError) {\r\n        setFieldsetError(fieldset, errorMessage);\r\n        input.classList.add(\"invalid\");\r\n      }\r\n      return false;\r\n    } else {\r\n      clearInvalidStatus(input);\r\n    }\r\n\r\n    if (fieldsetIsValid(fieldset)) {\r\n      if (showError) {\r\n        setFieldsetError(fieldset, \"\");\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function setFieldsetError(fieldset, errorMessage) {\r\n    const errorElement = fieldset.querySelector(\".error-message\");\r\n    errorElement.textContent = errorMessage;\r\n\r\n    if (errorMessage) {\r\n      fieldset.classList.remove(\"valid\");\r\n    } else {\r\n      fieldset.classList.add(\"valid\");\r\n    }\r\n  }\r\n\r\n  function fieldsetIsValid(fieldset) {\r\n    const inputs = fieldset.querySelectorAll(\"input[type=number]\");\r\n    for (let i = 0; i < inputs.length; i++) {\r\n      const input = inputs[i];\r\n      if (!input.validity.valid) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function renderBoard(gameboard, container) {\r\n    const boardElement = generateBoard(gameboard);\r\n    container.innerHTML = \"\";\r\n    container.appendChild(boardElement);\r\n\r\n    addCellsDropListeners();\r\n  }\r\n\r\n  renderSetupBoardForm(playerName, boardSize);\r\n  addInputListeners();\r\n  addDraggableButtonsListeners();\r\n\r\n  let draggedButton = null;\r\n  const gameboard = new Gameboard(boardSize);\r\n  const gameboardPreview = document.querySelector(\".board-container\");\r\n\r\n  renderBoard(gameboard, gameboardPreview);\r\n}\r\n","import createSetupForm from \"./setupFormRenderer.js\";\r\nimport Player from \"./entities/Player.js\";\r\nimport ComputerPlayer from \"./entities/ComputerPlayer.js\";\r\nimport Gameboard from \"./entities/Gameboard.js\";\r\nimport initGame from \"./gameController.js\";\r\nimport initSetupBoard from \"./setupBoardController.js\";\r\nimport { shipSizes } from \"./shipSizes.js\";\r\n\r\nexport default function initSetup() {\r\n  function handlePlayersSubmit() {\r\n    const player1Input = document.querySelector(\"#player1-name\");\r\n    const player2Input = document.querySelector(\"#player2-name\");\r\n    const playAgainstComputerCheckbox = document.querySelector(\"#is-computer\");\r\n\r\n    if (!player1Input.reportValidity()) {\r\n      return;\r\n    }\r\n\r\n    if (!playAgainstComputerCheckbox.checked && player2Input.value === \"\") {\r\n      player2Input.setCustomValidity(\"Please enter a name for player 2.\");\r\n      player2Input.reportValidity();\r\n      return;\r\n    }\r\n\r\n    player1 = new Player(player1Input.value, new Gameboard(boardSize));\r\n\r\n    if (playAgainstComputerCheckbox.checked) {\r\n      const computerGameboard = Gameboard.generateRandomBoard(\r\n        shipSizes,\r\n        boardSize,\r\n        boardSize,\r\n      );\r\n      player2 = new ComputerPlayer(\r\n        player2Input.value || \"Computer\",\r\n        computerGameboard,\r\n      );\r\n    } else {\r\n      player2 = new Player(player2Input.value, new Gameboard(boardSize));\r\n    }\r\n\r\n    setupBoards();\r\n  }\r\n\r\n  function setupBoards() {\r\n    initSetupBoard(player1.getName(), boardSize);\r\n\r\n    const submitButton = document.querySelector(\".submit-board\");\r\n    submitButton.addEventListener(\"click\", () => {\r\n      handlerBoardSubmit(player1);\r\n\r\n      if (player2 instanceof ComputerPlayer) {\r\n        initGame(player1, player2);\r\n        return;\r\n      }\r\n\r\n      initSetupBoard(player2.getName(), boardSize);\r\n      window.scrollTo(0, 0);\r\n      const submitButton = document.querySelector(\".submit-board\");\r\n      submitButton.addEventListener(\"click\", () => {\r\n        handlerBoardSubmit(player2);\r\n        initGame(player1, player2);\r\n      });\r\n    });\r\n  }\r\n\r\n  function handlerBoardSubmit(player) {\r\n    const fielsets = document.querySelectorAll(\"fieldset\");\r\n    for (let i = 0; i < fielsets.length; i++) {\r\n      const fieldset = fielsets[i];\r\n      const x = Number(fieldset.querySelector('[name=\"x-coord\"]').value - 1);\r\n      const y = Number(fieldset.querySelector('[name=\"y-coord\"]').value - 1);\r\n      const size = Number(fieldset.querySelector('[name=\"ship-size\"]').value);\r\n      const orientation = fieldset.querySelector('[name=\"orientation\"]').value;\r\n\r\n      player.getGameboard().placeShip(x, y, size, orientation === \"horizontal\");\r\n    }\r\n  }\r\n\r\n  const boardSize = 10;\r\n  loadContent(createSetupForm);\r\n  let player1;\r\n  let player2;\r\n\r\n  const submitButton = document.querySelector(\".submit-players\");\r\n  submitButton.addEventListener(\"click\", handlePlayersSubmit);\r\n}\r\n\r\nfunction loadContent(functionGenerator) {\r\n  const main = document.querySelector(\"main\");\r\n  main.innerHTML = \"\";\r\n  main.appendChild(functionGenerator());\r\n}\r\n","import \"./style.css\";\r\nimport \"./setup.css\";\r\nimport \"./game.css\";\r\nimport \"./gameboard.css\";\r\nimport \"./setupBoard.css\";\r\n\r\nimport initSetup from \"./setupController.js\";\r\n\r\ninitSetup();\r\n"],"names":[],"sourceRoot":""}